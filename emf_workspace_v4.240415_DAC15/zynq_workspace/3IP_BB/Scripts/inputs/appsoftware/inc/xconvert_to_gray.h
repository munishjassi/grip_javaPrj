// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2013.1
// Copyright (C) 2013 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef XCONVERT_TO_GRAY_H
#define XCONVERT_TO_GRAY_H

#ifdef __cplusplus
extern "C" {
#endif

/***************************** Include Files *********************************/
#include "xil_types.h"
#include "xil_assert.h"
#include "xstatus.h"
#include "xil_io.h"
#include "xconvert_to_gray_CONTROL_BUS.h"

/**************************** Type Definitions ******************************/
typedef struct {
    u16 DeviceId; // currently not used
    u32 Control_bus_BaseAddress;
} XConvert_to_gray_Config;

typedef struct {
    u32 Control_bus_BaseAddress;
    u32 IsReady;
} XConvert_to_gray;

/***************** Macros (Inline Functions) Definitions *********************/
#define XConvert_to_gray_WriteReg(BaseAddress, RegOffset, Data) \
    Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))

#define XConvert_to_gray_ReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))

/************************** Function Prototypes *****************************/
int XConvert_to_gray_Initialize(XConvert_to_gray *InstancePtr, XConvert_to_gray_Config *ConfigPtr);

void XConvert_to_gray_Start(XConvert_to_gray *InstancePtr);
u32 XConvert_to_gray_IsDone(XConvert_to_gray *InstancePtr);
u32 XConvert_to_gray_IsIdle(XConvert_to_gray *InstancePtr);
u32 XConvert_to_gray_IsReady(XConvert_to_gray *InstancePtr);
void XConvert_to_gray_EnableAutoRestart(XConvert_to_gray *InstancePtr);
void XConvert_to_gray_DisableAutoRestart(XConvert_to_gray *InstancePtr);

void XConvert_to_gray_SetRows(XConvert_to_gray *InstancePtr, u32 Data);
u32 XConvert_to_gray_GetRows(XConvert_to_gray *InstancePtr);
void XConvert_to_gray_SetCols(XConvert_to_gray *InstancePtr, u32 Data);
u32 XConvert_to_gray_GetCols(XConvert_to_gray *InstancePtr);

void XConvert_to_gray_InterruptGlobalEnable(XConvert_to_gray *InstancePtr);
void XConvert_to_gray_InterruptGlobalDisable(XConvert_to_gray *InstancePtr);
void XConvert_to_gray_InterruptEnable(XConvert_to_gray *InstancePtr, u32 Mask);
void XConvert_to_gray_InterruptDisable(XConvert_to_gray *InstancePtr, u32 Mask);
void XConvert_to_gray_InterruptClear(XConvert_to_gray *InstancePtr, u32 Mask);
u32 XConvert_to_gray_InterruptGetEnabled(XConvert_to_gray *InstancePtr);
u32 XConvert_to_gray_InterruptGetStatus(XConvert_to_gray *InstancePtr);

#ifdef __cplusplus
}
#endif

#endif
