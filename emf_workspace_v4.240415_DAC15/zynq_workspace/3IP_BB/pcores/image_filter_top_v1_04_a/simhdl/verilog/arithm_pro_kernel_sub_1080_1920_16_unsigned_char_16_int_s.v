// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2013.1 (Debug Build)
// Copyright (C) 2013 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module arithm_pro_kernel_sub_1080_1920_16_unsigned_char_16_int_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        src_data_stream_0_V_dout,
        src_data_stream_0_V_empty_n,
        src_data_stream_0_V_read,
        src_data_stream_1_V_dout,
        src_data_stream_1_V_empty_n,
        src_data_stream_1_V_read,
        src_data_stream_2_V_dout,
        src_data_stream_2_V_empty_n,
        src_data_stream_2_V_read,
        scl_val_address0,
        scl_val_ce0,
        scl_val_q0,
        scl_val_address1,
        scl_val_ce1,
        scl_val_q1,
        dst_rows_V_read,
        dst_cols_V_read,
        dst_data_stream_0_V_din,
        dst_data_stream_0_V_full_n,
        dst_data_stream_0_V_write,
        dst_data_stream_1_V_din,
        dst_data_stream_1_V_full_n,
        dst_data_stream_1_V_write,
        dst_data_stream_2_V_din,
        dst_data_stream_2_V_full_n,
        dst_data_stream_2_V_write
);

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] src_data_stream_0_V_dout;
input   src_data_stream_0_V_empty_n;
output   src_data_stream_0_V_read;
input  [7:0] src_data_stream_1_V_dout;
input   src_data_stream_1_V_empty_n;
output   src_data_stream_1_V_read;
input  [7:0] src_data_stream_2_V_dout;
input   src_data_stream_2_V_empty_n;
output   src_data_stream_2_V_read;
output  [1:0] scl_val_address0;
output   scl_val_ce0;
input  [5:0] scl_val_q0;
output  [1:0] scl_val_address1;
output   scl_val_ce1;
input  [5:0] scl_val_q1;
input  [11:0] dst_rows_V_read;
input  [11:0] dst_cols_V_read;
output  [7:0] dst_data_stream_0_V_din;
input   dst_data_stream_0_V_full_n;
output   dst_data_stream_0_V_write;
output  [7:0] dst_data_stream_1_V_din;
input   dst_data_stream_1_V_full_n;
output   dst_data_stream_1_V_write;
output  [7:0] dst_data_stream_2_V_din;
input   dst_data_stream_2_V_full_n;
output   dst_data_stream_2_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg src_data_stream_0_V_read;
reg src_data_stream_1_V_read;
reg src_data_stream_2_V_read;
reg[1:0] scl_val_address0;
reg scl_val_ce0;
reg scl_val_ce1;
reg dst_data_stream_0_V_write;
reg dst_data_stream_1_V_write;
reg dst_data_stream_2_V_write;
reg   [2:0] ap_CS_fsm = 3'b000;
reg   [11:0] t_V_1_reg_172;
reg   [5:0] scl_val_load_reg_312;
wire   [8:0] tmp_0_cast_fu_184_p1;
reg   [8:0] tmp_0_cast_reg_337;
wire   [8:0] tmp_1_cast_fu_187_p1;
reg   [8:0] tmp_1_cast_reg_342;
wire   [8:0] tmp_2_cast_fu_191_p1;
reg   [8:0] tmp_2_cast_reg_347;
wire   [11:0] i_V_fu_200_p2;
reg   [11:0] i_V_reg_355;
wire   [0:0] exitcond_fu_206_p2;
reg   [0:0] exitcond_reg_360;
reg    ap_reg_ppiten_pp0_it0 = 1'b0;
reg    ap_sig_bdd_109;
reg    ap_reg_ppiten_pp0_it1 = 1'b0;
wire   [11:0] j_V_fu_211_p2;
wire   [0:0] exitcond4_fu_195_p2;
reg   [11:0] t_V_reg_161;
wire   [8:0] tmp_0_cast_108_fu_217_p1;
wire   [8:0] v_assign_fu_221_p2;
wire   [0:0] tmp_4_fu_226_p3;
wire   [7:0] tmp_5_fu_234_p1;
wire   [8:0] tmp_1_cast_109_fu_247_p1;
wire   [8:0] v_assign_1_fu_251_p2;
wire   [0:0] tmp_6_fu_256_p3;
wire   [7:0] tmp_7_fu_264_p1;
wire   [8:0] tmp_213_cast_fu_277_p1;
wire   [8:0] v_assign_2_fu_281_p2;
wire   [0:0] tmp_8_fu_286_p3;
wire   [7:0] tmp_9_fu_294_p1;
reg   [2:0] ap_NS_fsm;
parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 3'b000;
parameter    ap_ST_st2_fsm_1 = 3'b1;
parameter    ap_ST_st3_fsm_2 = 3'b10;
parameter    ap_ST_st4_fsm_3 = 3'b11;
parameter    ap_ST_pp0_stg0_fsm_4 = 3'b100;
parameter    ap_ST_st7_fsm_5 = 3'b101;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv12_0 = 12'b000000000000;
parameter    ap_const_lv64_0 = 64'b0000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv64_1 = 64'b1;
parameter    ap_const_lv64_2 = 64'b10;
parameter    ap_const_lv12_1 = 12'b1;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv8_0 = 8'b00000000;
parameter    ap_true = 1'b1;




/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_reg_ppiten_pp0_it0 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it0
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
    end else begin
        if (((ap_ST_pp0_stg0_fsm_4 == ap_CS_fsm) & ~(ap_sig_bdd_109 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & ~(exitcond_fu_206_p2 == ap_const_lv1_0))) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
        end else if (((ap_ST_st4_fsm_3 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond4_fu_195_p2))) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ppiten_pp0_it1 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it1
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
    end else begin
        if (((ap_ST_pp0_stg0_fsm_4 == ap_CS_fsm) & ~(ap_sig_bdd_109 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & (exitcond_fu_206_p2 == ap_const_lv1_0))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
        end else if ((((ap_ST_st4_fsm_3 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond4_fu_195_p2)) | ((ap_ST_pp0_stg0_fsm_4 == ap_CS_fsm) & ~(ap_sig_bdd_109 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & ~(exitcond_fu_206_p2 == ap_const_lv1_0)))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_pp0_stg0_fsm_4 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(ap_sig_bdd_109 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
        exitcond_reg_360 <= exitcond_fu_206_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st4_fsm_3 == ap_CS_fsm)) begin
        i_V_reg_355 <= i_V_fu_200_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st2_fsm_1 == ap_CS_fsm)) begin
        scl_val_load_reg_312 <= scl_val_q0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_pp0_stg0_fsm_4 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(ap_sig_bdd_109 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & (exitcond_fu_206_p2 == ap_const_lv1_0))) begin
        t_V_1_reg_172 <= j_V_fu_211_p2;
    end else if (((ap_ST_st4_fsm_3 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond4_fu_195_p2))) begin
        t_V_1_reg_172 <= ap_const_lv12_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st7_fsm_5 == ap_CS_fsm)) begin
        t_V_reg_161 <= i_V_reg_355;
    end else if ((ap_ST_st3_fsm_2 == ap_CS_fsm)) begin
        t_V_reg_161 <= ap_const_lv12_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st3_fsm_2 == ap_CS_fsm)) begin
        tmp_0_cast_reg_337[0] <= tmp_0_cast_fu_184_p1[0];
        tmp_0_cast_reg_337[1] <= tmp_0_cast_fu_184_p1[1];
        tmp_0_cast_reg_337[2] <= tmp_0_cast_fu_184_p1[2];
        tmp_0_cast_reg_337[3] <= tmp_0_cast_fu_184_p1[3];
        tmp_0_cast_reg_337[4] <= tmp_0_cast_fu_184_p1[4];
        tmp_0_cast_reg_337[5] <= tmp_0_cast_fu_184_p1[5];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st3_fsm_2 == ap_CS_fsm)) begin
        tmp_1_cast_reg_342[0] <= tmp_1_cast_fu_187_p1[0];
        tmp_1_cast_reg_342[1] <= tmp_1_cast_fu_187_p1[1];
        tmp_1_cast_reg_342[2] <= tmp_1_cast_fu_187_p1[2];
        tmp_1_cast_reg_342[3] <= tmp_1_cast_fu_187_p1[3];
        tmp_1_cast_reg_342[4] <= tmp_1_cast_fu_187_p1[4];
        tmp_1_cast_reg_342[5] <= tmp_1_cast_fu_187_p1[5];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st3_fsm_2 == ap_CS_fsm)) begin
        tmp_2_cast_reg_347[0] <= tmp_2_cast_fu_191_p1[0];
        tmp_2_cast_reg_347[1] <= tmp_2_cast_fu_191_p1[1];
        tmp_2_cast_reg_347[2] <= tmp_2_cast_fu_191_p1[2];
        tmp_2_cast_reg_347[3] <= tmp_2_cast_fu_191_p1[3];
        tmp_2_cast_reg_347[4] <= tmp_2_cast_fu_191_p1[4];
        tmp_2_cast_reg_347[5] <= tmp_2_cast_fu_191_p1[5];
    end
end

/// ap_done assign process. ///
always @ (ap_start or ap_CS_fsm or exitcond4_fu_195_p2)
begin
    if (((~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm)) | ((ap_ST_st4_fsm_3 == ap_CS_fsm) & ~(ap_const_lv1_0 == exitcond4_fu_195_p2)))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_CS_fsm)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_CS_fsm or exitcond4_fu_195_p2)
begin
    if (((ap_ST_st4_fsm_3 == ap_CS_fsm) & ~(ap_const_lv1_0 == exitcond4_fu_195_p2))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// dst_data_stream_0_V_write assign process. ///
always @ (ap_CS_fsm or exitcond_reg_360 or ap_sig_bdd_109 or ap_reg_ppiten_pp0_it1)
begin
    if (((ap_ST_pp0_stg0_fsm_4 == ap_CS_fsm) & (exitcond_reg_360 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~(ap_sig_bdd_109 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
        dst_data_stream_0_V_write = ap_const_logic_1;
    end else begin
        dst_data_stream_0_V_write = ap_const_logic_0;
    end
end

/// dst_data_stream_1_V_write assign process. ///
always @ (ap_CS_fsm or exitcond_reg_360 or ap_sig_bdd_109 or ap_reg_ppiten_pp0_it1)
begin
    if (((ap_ST_pp0_stg0_fsm_4 == ap_CS_fsm) & (exitcond_reg_360 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~(ap_sig_bdd_109 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
        dst_data_stream_1_V_write = ap_const_logic_1;
    end else begin
        dst_data_stream_1_V_write = ap_const_logic_0;
    end
end

/// dst_data_stream_2_V_write assign process. ///
always @ (ap_CS_fsm or exitcond_reg_360 or ap_sig_bdd_109 or ap_reg_ppiten_pp0_it1)
begin
    if (((ap_ST_pp0_stg0_fsm_4 == ap_CS_fsm) & (exitcond_reg_360 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~(ap_sig_bdd_109 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
        dst_data_stream_2_V_write = ap_const_logic_1;
    end else begin
        dst_data_stream_2_V_write = ap_const_logic_0;
    end
end

/// scl_val_address0 assign process. ///
always @ (ap_CS_fsm)
begin
    if ((ap_ST_st2_fsm_1 == ap_CS_fsm)) begin
        scl_val_address0 = ap_const_lv64_1;
    end else if ((ap_ST_st1_fsm_0 == ap_CS_fsm)) begin
        scl_val_address0 = ap_const_lv64_0;
    end else begin
        scl_val_address0 = ap_const_lv64_1;
    end
end

/// scl_val_ce0 assign process. ///
always @ (ap_start or ap_CS_fsm)
begin
    if ((((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0)) | (ap_ST_st2_fsm_1 == ap_CS_fsm))) begin
        scl_val_ce0 = ap_const_logic_1;
    end else begin
        scl_val_ce0 = ap_const_logic_0;
    end
end

/// scl_val_ce1 assign process. ///
always @ (ap_CS_fsm)
begin
    if ((ap_ST_st2_fsm_1 == ap_CS_fsm)) begin
        scl_val_ce1 = ap_const_logic_1;
    end else begin
        scl_val_ce1 = ap_const_logic_0;
    end
end

/// src_data_stream_0_V_read assign process. ///
always @ (ap_CS_fsm or exitcond_reg_360 or ap_sig_bdd_109 or ap_reg_ppiten_pp0_it1)
begin
    if (((ap_ST_pp0_stg0_fsm_4 == ap_CS_fsm) & (exitcond_reg_360 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~(ap_sig_bdd_109 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
        src_data_stream_0_V_read = ap_const_logic_1;
    end else begin
        src_data_stream_0_V_read = ap_const_logic_0;
    end
end

/// src_data_stream_1_V_read assign process. ///
always @ (ap_CS_fsm or exitcond_reg_360 or ap_sig_bdd_109 or ap_reg_ppiten_pp0_it1)
begin
    if (((ap_ST_pp0_stg0_fsm_4 == ap_CS_fsm) & (exitcond_reg_360 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~(ap_sig_bdd_109 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
        src_data_stream_1_V_read = ap_const_logic_1;
    end else begin
        src_data_stream_1_V_read = ap_const_logic_0;
    end
end

/// src_data_stream_2_V_read assign process. ///
always @ (ap_CS_fsm or exitcond_reg_360 or ap_sig_bdd_109 or ap_reg_ppiten_pp0_it1)
begin
    if (((ap_ST_pp0_stg0_fsm_4 == ap_CS_fsm) & (exitcond_reg_360 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~(ap_sig_bdd_109 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
        src_data_stream_2_V_read = ap_const_logic_1;
    end else begin
        src_data_stream_2_V_read = ap_const_logic_0;
    end
end
always @ (ap_start or ap_CS_fsm or exitcond_fu_206_p2 or ap_reg_ppiten_pp0_it0 or ap_sig_bdd_109 or ap_reg_ppiten_pp0_it1 or exitcond4_fu_195_p2)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        ap_ST_st2_fsm_1 : 
            ap_NS_fsm = ap_ST_st3_fsm_2;
        ap_ST_st3_fsm_2 : 
            ap_NS_fsm = ap_ST_st4_fsm_3;
        ap_ST_st4_fsm_3 : 
            if (~(ap_const_lv1_0 == exitcond4_fu_195_p2)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_4;
            end
        ap_ST_pp0_stg0_fsm_4 : 
            if (~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(ap_sig_bdd_109 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & ~(exitcond_fu_206_p2 == ap_const_lv1_0))) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_4;
            end else if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(ap_sig_bdd_109 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & ~(exitcond_fu_206_p2 == ap_const_lv1_0))) begin
                ap_NS_fsm = ap_ST_st7_fsm_5;
            end else begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_4;
            end
        ap_ST_st7_fsm_5 : 
            ap_NS_fsm = ap_ST_st4_fsm_3;
        default : 
            ap_NS_fsm = 'bx;
    endcase
end

/// ap_sig_bdd_109 assign process. ///
always @ (src_data_stream_0_V_empty_n or src_data_stream_1_V_empty_n or src_data_stream_2_V_empty_n or dst_data_stream_0_V_full_n or dst_data_stream_1_V_full_n or dst_data_stream_2_V_full_n or exitcond_reg_360)
begin
    ap_sig_bdd_109 = (((src_data_stream_0_V_empty_n == ap_const_logic_0) & (exitcond_reg_360 == ap_const_lv1_0)) | ((exitcond_reg_360 == ap_const_lv1_0) & (src_data_stream_1_V_empty_n == ap_const_logic_0)) | ((exitcond_reg_360 == ap_const_lv1_0) & (src_data_stream_2_V_empty_n == ap_const_logic_0)) | ((exitcond_reg_360 == ap_const_lv1_0) & (dst_data_stream_0_V_full_n == ap_const_logic_0)) | ((exitcond_reg_360 == ap_const_lv1_0) & (dst_data_stream_1_V_full_n == ap_const_logic_0)) | ((exitcond_reg_360 == ap_const_lv1_0) & (dst_data_stream_2_V_full_n == ap_const_logic_0)));
end
assign dst_data_stream_0_V_din = ((tmp_4_fu_226_p3)? ap_const_lv8_0: tmp_5_fu_234_p1);
assign dst_data_stream_1_V_din = ((tmp_6_fu_256_p3)? ap_const_lv8_0: tmp_7_fu_264_p1);
assign dst_data_stream_2_V_din = ((tmp_8_fu_286_p3)? ap_const_lv8_0: tmp_9_fu_294_p1);
assign exitcond4_fu_195_p2 = (t_V_reg_161 == dst_rows_V_read? 1'b1: 1'b0);
assign exitcond_fu_206_p2 = (t_V_1_reg_172 == dst_cols_V_read? 1'b1: 1'b0);
assign i_V_fu_200_p2 = (t_V_reg_161 + ap_const_lv12_1);
assign j_V_fu_211_p2 = (t_V_1_reg_172 + ap_const_lv12_1);
assign scl_val_address1 = ap_const_lv64_2;
assign tmp_0_cast_108_fu_217_p1 = $unsigned(src_data_stream_0_V_dout);
assign tmp_0_cast_fu_184_p1 = $unsigned(scl_val_load_reg_312);
assign tmp_1_cast_109_fu_247_p1 = $unsigned(src_data_stream_1_V_dout);
assign tmp_1_cast_fu_187_p1 = $unsigned(scl_val_q0);
assign tmp_213_cast_fu_277_p1 = $unsigned(src_data_stream_2_V_dout);
assign tmp_2_cast_fu_191_p1 = $unsigned(scl_val_q1);
assign tmp_4_fu_226_p3 = v_assign_fu_221_p2[ap_const_lv32_8];
assign tmp_5_fu_234_p1 = v_assign_fu_221_p2[7:0];
assign tmp_6_fu_256_p3 = v_assign_1_fu_251_p2[ap_const_lv32_8];
assign tmp_7_fu_264_p1 = v_assign_1_fu_251_p2[7:0];
assign tmp_8_fu_286_p3 = v_assign_2_fu_281_p2[ap_const_lv32_8];
assign tmp_9_fu_294_p1 = v_assign_2_fu_281_p2[7:0];
assign v_assign_1_fu_251_p2 = (tmp_1_cast_109_fu_247_p1 - tmp_1_cast_reg_342);
assign v_assign_2_fu_281_p2 = (tmp_213_cast_fu_277_p1 - tmp_2_cast_reg_347);
assign v_assign_fu_221_p2 = (tmp_0_cast_108_fu_217_p1 - tmp_0_cast_reg_337);
always @ (posedge ap_clk)
begin
    tmp_0_cast_reg_337[8:6] <= 3'b000;
    tmp_1_cast_reg_342[8:6] <= 3'b000;
    tmp_2_cast_reg_347[8:6] <= 3'b000;
end



endmodule //arithm_pro_kernel_sub_1080_1920_16_unsigned_char_16_int_s

