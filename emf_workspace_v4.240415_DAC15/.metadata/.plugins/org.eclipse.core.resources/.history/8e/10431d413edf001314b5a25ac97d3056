/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */


package org.spiritconsortium.xml.schema.spirit.spirit.tests;

import java.io.IOException;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.eclipse.emf.common.util.Diagnostic;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.URI;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;

import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;

import org.eclipse.emf.ecore.util.BasicExtendedMetaData;
import org.eclipse.emf.ecore.util.ExtendedMetaData;
import org.eclipse.emf.ecore.xmi.XMLResource;

import org.spiritconsortium.xml.schema.spirit.spirit.ComponentInstanceType;
import org.spiritconsortium.xml.schema.spirit.spirit.ComponentInstancesType;
import org.spiritconsortium.xml.schema.spirit.spirit.DesignType;
import org.spiritconsortium.xml.schema.spirit.spirit.DocumentRoot;
import org.spiritconsortium.xml.schema.spirit.spirit.InterconnectionType;
import org.spiritconsortium.xml.schema.spirit.spirit.InterconnectionsType;
import org.spiritconsortium.xml.schema.spirit.spirit._1Factory;
import org.spiritconsortium.xml.schema.spirit.spirit._1Package;
import org.spiritconsortium.xml.schema.spirit.spirit.util._1ResourceFactoryImpl;

import generativeGrammar.designAbstractionGraph.DesignAbstraction;
import generativeGrammar.designAbstractionGraph.GlobalVars;
import generativeGrammar.designAbstractionGraph.LibCompAbstraction;
import generativeGrammar.designAbstractionGraph.SWrule;
import generativeGrammar.designAbstractionGraph.impl.DesignAbstractionImpl;
import generativeGrammar.designAbstractionGraph.impl.DesignGeneration;
import generativeGrammar.designAbstractionGraph.impl.LibAbstractionGenerateImpl;
import generativeGrammar.designAbstractionGraph.impl.SWxmlGeneration;

import generativeGrammar.utils.GenerativRulePair;
import generativeGrammar.utils.SWmappingPair;

/**
 * <!-- begin-user-doc --> A sample utility for the '<em><b>spirit</b></em>'
 * package. <!-- end-user-doc -->
 * 
 * @generated
 */
public class _1GenerativGrammarProject {
	/**
	 * <!-- begin-user-doc --> Load all the argument file paths or URIs as
	 * instances of the model. <!-- end-user-doc -->
	 * 
	 * @param args
	 *            the file paths or URIs.
	 * @throws IOException
	 * @generated
	 */
	
	public static void main(String[] args) throws IOException {
		// Create a resource set to hold the resources.
		//
		List<DesignAbstraction> allDesigns = new ArrayList<DesignAbstraction>();

		System.out.printf("Entering the Main() function");

		ResourceSet resourceSet = new ResourceSetImpl();

		// Register the appropriate resource factory to handle all file
		// extensions.
		//
		resourceSet.getResourceFactoryRegistry().getExtensionToFactoryMap()
				.put(Resource.Factory.Registry.DEFAULT_EXTENSION, new _1ResourceFactoryImpl());
		
		// Register the package to ensure it is available during loading.
		//
		resourceSet.getPackageRegistry().put(_1Package.eNS_URI, _1Package.eINSTANCE);

		URI uri = URI.createFileURI("../data/hw/System_temp.xml");

		try {
			// Demand load resource for this file.
			//
			Resource resource = resourceSet.getResource(uri, true);
			System.out.println();
			System.out.println("LOADED " + uri);
			System.out.println("Traversing EMF EObject");

			List<DesignType> designs = new ArrayList<DesignType>();
			
			DocumentRoot documentRoot = (DocumentRoot) resource.getContents().get(0);
			DesignType rootTreeNode = documentRoot.getDesign();
			EClass rootTreeClass = rootTreeNode.eClass();
			System.out.println(rootTreeClass.getEStructuralFeature("vendor"));
			final ExtendedMetaData extendedMetaData = new BasicExtendedMetaData(resourceSet.getPackageRegistry());
			resourceSet.getLoadOptions().put(XMLResource.OPTION_EXTENDED_META_DATA, extendedMetaData);
			
			designs.add(rootTreeNode);
			designs.add(rootTreeNode);
			//Resource resource3 = resourceSet.createResource(URI.createFileURI("../data/hw/System_temp.xml"));
			//resource3.getContents().add(designs.get(0));
			//resource3.getContents().add(designs.get(1));
			//resource3.save(null);
			
			
			
			InterconnectionsType interconnections = rootTreeNode.getInterconnections();
			List<InterconnectionType> interconnectionsList = interconnections.getInterconnection();

			ComponentInstancesType components = rootTreeNode.getComponentInstances();
			List<ComponentInstanceType> componentsList = components.getComponentInstance();

			System.out.println("\nDesign Components Found: ");
			for (Iterator<ComponentInstanceType> j = componentsList.iterator(); j.hasNext();) {
				ComponentInstanceType object = (ComponentInstanceType) j.next();
				System.out.printf("%-20s" + "\t Component Ref: " + object.getComponentRef() + "\n", object.getInstanceName());

			}

			System.out.println("Interconnects Found: ");
			for (Iterator<InterconnectionType> j = interconnectionsList.iterator(); j.hasNext();) {
				InterconnectionType object = (InterconnectionType) j.next();
				System.out.printf("%-40s" + "   Active Interfaces:" + object.getActiveInterface() + "\n", object.getName());
			}

			System.out.println("\nLoaded " + uri);

			LibAbstractionGenerateImpl GenerateLib = new LibAbstractionGenerateImpl();
			GlobalVars.LIBRARY = GenerateLib.GenerateLibAbstraction(GlobalVars.LIB_DIR_PATH);
			
			
			System.out.println("\n################################################");
			System.out.println("Post Library Prepration Check- Components");
			for (Iterator<LibCompAbstraction> i = GlobalVars.LIBRARY.iterator(); i.hasNext();) {
				LibCompAbstraction object = (LibCompAbstraction) i.next();
				System.out.println("Instance Name: " + object.getInstanceName());
				System.out.println("	Instance type Bus: " + object.getIS_BUS());
				System.out.println("	Master Ports: " + object.getMasterPorts());
				System.out.println("	Slave Ports: " + object.getSlavePorts());
				System.out.println("	MirroredMaster Ports: " + object.getMirMasterPorts());
				System.out.println("	MirroredSlave Ports: " + object.getMirSlavePorts());
				System.out.println("	All Ports: " + object.getAllPorts());
			}
			System.out.println("################################################");

			
			//
			// Architectural Graph Generation
			// Input is the String to directory path with Design and Component description
			//
			DesignAbstractionImpl designAbs = new DesignAbstractionImpl();
			designAbs.genGraph("../data/hw/arch1");
			//designAbs.genCompDesignGraph("../data/hw/System.xml");
			//GlobalVars.TOP_DESIGN.genCompDesignGraph("../data/hw/System.xml");
			
			designAbs.PrintDesignSummary();
			GlobalVars.TOP_DESIGN = designAbs;
			
			// 
			// Left side pattern input and conversion to Architecture graph
			//
			DesignAbstractionImpl leftpat1 = new DesignAbstractionImpl();
			leftpat1.genCompDesignGraph("../data/hw/pat.xml");

			// 
			// Right side pattern input and conversion to Architecture graph
			//
			DesignAbstractionImpl rightpat1 = new DesignAbstractionImpl();
//			newPatAbs.genCompDesignGraph("../data/hw/newPat0_1HW.xml");
			rightpat1.genCompDesignGraph("../data/hw/newPat1_2ndBus_1HW.xml");
//			newPatAbs.genCompDesignGraph("../data/hw/newPat2_2ndBus_2HW.xml");
	
			// 
			// Creation of Rule pair for Rule1
			//
			GenerativRulePair gp = new GenerativRulePair(leftpat1, rightpat1);
			GlobalVars.GENERATV_RULES.add(gp);

			//
			// Define SW mappings. Define SW rules
			// 
			SWmappingPair map1 = new SWmappingPair();
			SWmappingPair map2 = new SWmappingPair();
			SWrule swrule1 = new SWrule();
			SWrule swrule2 = new SWrule();
	
			map1.setSWruleMapping("Task1", "DMA");
			map2.setSWruleMapping("Task2", "hwacc1");
			
			swrule1.setRuleName("Rule1");
			swrule2.setRuleName("Rule2");
			swrule1.addMappings(map1);
			swrule2.addMappings(map2);
			/*
			GlobalVars.GENERATV_SW_RULES.add(swrule1);
			GlobalVars.GENERATV_SW_RULES.add(swrule2);
	*/		
			
			//if (GlobalVars.TOP_DESIGN.desComponents.get(1).IsEquivalent(patAbs.desComponents.get(1))) {
			//	System.out.println("YESss");
			//}
			
			//if (GlobalVars.TOP_DESIGN.MatchPattern(patAbs)) {
			//	System.out.println("YEAHhhh");
			//}
			
			/*GlobalVars global = new GlobalVars();
			for(int i = 0; i <2; i++) {
				DesignAbstractionImpl desigAbs = new DesignAbstractionImpl();
				desigAbs.genCompDesignGraph("../data/hw/System.xml");
				global.ALL_DESIGNS.add(desigAbs);
			}
			*/

		//	GlobalVars.ALL_DESIGNS.add(designAbs);
		//	GlobalVars.ALL_DESIGNS.add(desigAbs);
			
			//DesignAbstraction desigAbs = new DesignAbstractionImpl();
			//desigAbs = global.ALL_DESIGNS.get(0);

			//Cloner cloner = new Cloner();
			//DesignAbstraction desigAbs = cloner.deepClone(designAbs);
			
			
			GlobalVars.ALL_DESIGNS.add(designAbs);
			
			//
			// Applying Rule1 on Input design to generate new Design
			//
			DesignGeneration generateDesign = new DesignGeneration();
			DesignAbstraction genDes = generateDesign.GenerateNewDesign(designAbs, GlobalVars.GENERATV_RULES.get(0));
			generateDesign.GenerateIPXACT("../data/hw/arch1/System.design.xml", genDes);
			GlobalVars.ALL_DESIGNS.add(genDes);

			//GlobalVars.ALL_DESIGNS.get(1).getDesComponents().get(7).getPortTORefComponentPair().get(0).getRefComp().setInstanceName("MUNI");
			for (int i = 0 ; i < GlobalVars.ALL_DESIGNS.size(); i++) {
				GlobalVars.ALL_DESIGNS.get(i).PrintDesignSummary();
			/*	GlobalVars.ALL_DESIGNS.get(i).UniquifyInstanceNames();
				System.out.println("POST UNIQUIFICATION");
				GlobalVars.ALL_DESIGNS.get(i).PrintDesignSummary();
				GlobalVars.ALL_DESIGNS.get(i).DesignDelineation();
				System.out.println("POST Delineation");
				GlobalVars.ALL_DESIGNS.get(i).PrintDesignSummary();*/
			}
			
			
			SWxmlGeneration swGenerationObj = new SWxmlGeneration();
			swGenerationObj.GenerateNewSWxml(swrule2, "../data/sw/out", "../data/sw/out_new");
			swGenerationObj.ComputePerformances("../data/sw/out");
			
			//desigAbs = cloner.deepClone(designAbs);
			//GlobalVars.ALL_DESIGNS.add(desigAbs);
			
			//GlobalVars.ALL_DESIGNS.get(0).getDesComponents().get(0).setMapped(true);
			//System.out.println(GlobalVars.ALL_DESIGNS.get(0).getDesComponents().get(4).getPortTORefComponentPair().get(1).getRefComp().isMapped());
			//GlobalVars.ALL_DESIGNS.get(0).getDesComponents().get(0).setMapped(true);
			//System.out.println (GlobalVars.ALL_DESIGNS.get(0).getDesComponents().get(0).isMapped());
			//System.out.println (GlobalVars.ALL_DESIGNS.get(1).getDesComponents().get(0).isMapped());
			//System.out.println (GlobalVars.ALL_DESIGNS.get(0).getDesComponents().get(0).getInstanceName());			
			//System.out.println (GlobalVars.ALL_DESIGNS.get(1).getDesComponents().get(0).getInstanceName());

			
			/*
			 * new Object() { public void traverse(String indent, EObject
			 * eObject) { //
			 * ((TreeNode)eObject).getMuniNodes().add("Just added"); //eObject
			 * .eClass().getEStructuralFeatures().add(eObject.eClass
			 * ().getEStructuralFeature(1)); //
			 * System.out.println("eObject Structure >>>" +
			 * eObject.eClass().getEStructuralFeatures()); EClass eClass =
			 * eObject.eClass(); //EStructuralFeature fea =
			 * eObject.eClass().getEStructuralFeature("muniNode"); //
			 * eObject.eSet(fea, "NNN");
			 * 
			 * // System.out.println("InstanceName :"
			 * +eClass.getEStructuralFeature("nameAttribute")); //
			 * System.out.println("Class Name :"
			 * +eClass.getEStructuralFeature("name"));
			 * 
			 * FeatureMap featureMap =
			 * (FeatureMap)eObject.eGet(vendorAttribute); // featureMap.add(6,
			 * munishElement, "adf"); // System.out.println("FEATUREMAP:::::" +
			 * featureMap.toString());
			 * 
			 * for (int i = 0, size = featureMap.size(); i < size; ++i) {
			 * EStructuralFeature feature = featureMap.getEStructuralFeature(i);
			 * // System.out.println("FEATURE:: " + featureMap.size()+ "/"+ i +
			 * " :::" + feature.getEContainingClass() + featureMap.getValue(i));
			 * 
			 * if (feature instanceof EReference) { //
			 * System.out.println("Feature is EReference"); //
			 * System.out.println("EReference Feature  :"
			 * +featureMap.getValue(i)); traverse(indent + "  ",
			 * (EObject)featureMap.getValue(i));
			 * 
			 * } else if (feature instanceof EAttribute) { //
			 * System.out.println("Feature is EAttribute");
			 * System.out.println("EAttribute Feature  :" +feature.getName() );
			 * // System.out.println("EAttribute Feature :"+ featureMap.size()+
			 * "/"+ i +"  " + featureMap.getValue(i)); } else {
			 * System.out.println("Other Feature  :" +feature); }
			 * 
			 * }
			 * 
			 * }
			 * 
			 * }.traverse("", rootTreeNode);
			 */
			Resource resource2 = resourceSet.createResource(URI.createFileURI("../data/hw/System_mod.xml"));
			resource2.getContents().add(rootTreeNode);
			resource2.save(null);
			// Munish Commented
			// resource2.save(System.out, null);
			// System.out.println();
		} catch (RuntimeException exception) {
			System.out.println("Problem loading " + uri);
			exception.printStackTrace();
		}
		System.out.printf("\nI am put here in example test end");

	}

	/**
	 * <!-- begin-user-doc --> Prints diagnostics with indentation. <!--
	 * end-user-doc -->
	 * 
	 * @param diagnostic
	 *            the diagnostic to print.
	 * @param indent
	 *            the indentation for printing.
	 * @generated
	 */
	protected static void printDiagnostic(Diagnostic diagnostic, String indent) {
		System.out.print(indent);
		System.out.println(diagnostic.getMessage());
		for (Iterator<Diagnostic> i = diagnostic.getChildren().iterator(); i.hasNext();) {
			printDiagnostic((Diagnostic) i.next(), indent + "  ");
		}
	}

} // _1Example
